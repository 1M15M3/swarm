@node API, Usage, Running a Node, Top
@chapter API

@menu
* Command-line API::
* JavaScript API::
* HTTP API::
@end menu

@node Command-line API
@section Command-line API

The only command-line argument to @command{geth} affecting swarm at present
is @option{--bzz} switching on Swarm support.

@node JavaScript API
@section JavaScript API

@command{bzz.get(path)}

@command{bzz.put(content, content_type)}

@command{bzz.modify(root_hash, path, content_hash, content_type)}

@command{bzz.download(path, local_path)}

@command{bzz.upload(local_path, index)}

@command{bzz.register(sender, domain, hash)}

@command{bzz.resolve(host)}


@node HTTP API
@section HTTP API

Perhaps the most important way to acces swarm is through the @code{http}
gateway, typically running on the local machine. This is also how queries
to @code{bzz:} protocol URLs are to be handled. The following @code{http}
methods are supported:

@command{GET} provides read access to Swarm-hosted content. The first 
section of the URI (until the first slash) is either @code{raw}, the 
swarm hash of a manifest or a registered name which resolves to such. 
Range queries are supported. URIs beginning with @code{raw/} are always 
followed by a Swarm object's swarm hash. If the object exists, it is 
returned in raw binary format with a generic @code{Content-type: 
application/octet-stream} header. URIs beginning with the swarm hash of 
a manifest object or its registered name are optionally followed by an 
arbitrary URI-compatible string, which is resolved in accordance with 
the content of the manifest, including the returned object's 
@code{Content-type} header.

@command{PUT} is the way to insert objects into Swarm. If the URI is 
@code{raw} (not followed by anything), then upon successful insertion 
the swarm hash of the object is returned as @code{text/plain}. If the 
URI is anything else, the returned swarm hash is that of a manifest 
object in which the given URI (with the modified manifest hash, of 
course)would resolve to the uploaded object, while every other URI 
resolves the same way it did in the manifest object addressed by the
original URI.

@command{DELETE} is very similar to @command{PUT}, except that instead 
of adding or modifying the reference in the manifest object it removes 
it. Note that it does not actually delete anything from swarm (which is 
conceptually impossible), merely creates a new manifest object that does 
not contain the given reference.
