@node  Running a Node, Usage, About, Top
@chapter  Running a Node



@quindex What do I want to install?

@quindex What is Swarm?

@menu
* Installation::
* Configuration options::
* Getting started::
@end menu

@node Installation, Configuration options, Running a Node, Running a Node
@section Installation

Swarm is part of the Ethereum stack and currently only supports running on the ethereum network as a subprotocol of the go client nodes.
Bzz aware @command{geth} is on ethersphere's fork of @file{go-ethereum} (and currently only supports manual install from source), within the @command{bzz} branch.

Installation instructions for manual build are identical to those for the ethereum go implementation.
See @url{https://github.com/ethereum/go-ethereum/wiki/Developers'-Guide}

@menu
* Download::
* Supported Platforms::
* Prerequisites::
* Building from source::
@end menu

@node Download, Supported Platforms, Installation, Installation
@subsection Download

@quindex Where can I find the sources?
The source code is found on github: https://github.com/ethersphere/go-ethereum/tree/bzz/


@node Supported Platforms, Prerequisites, Download, Installation
@subsection Supported Platforms

@quindex What platforms are supported by Swarm?
Geth runs on all major platforms (linux, MacOSX, Windows, also raspberry pie, android OS).

@quotation
@strong{Warning:}
This package has not been tested on platforms other than linux and OSX.
@end quotation

@node Prerequisites, Building from source, Supported Platforms, Installation
@subsection Prerequisites

@quindex What do I need if I want to install this package?


On top of the @code{go} compiler and  buildtools, building @command{geth} requires the following packages:

@itemize
@item [GMP](https://gmplib.org)
@item [Go](https://golang.org)
@item [Git](http://git.org)
@item [Godep](http://github.com/gotools/godep)
@end itemize


Grab the relevant prerequisites and build from source.

@example
apt-get install libgmp32-dev golang git
@end example

On Mac OSX, using @command{brew}

@example
brew install gmp go git
go get http://github.com/gotools/godep
@end example

Now set your environment variables:

@example
go get github.com/tools/godep
PATH=$GOPATH/bin:$PATH
GOPATH=`godep path`:$GOPATH
@end example


@node Building from source,  , Prerequisites, Installation
@subsection Building from source

Clone the repository (or better, your fork of it) to a directory of your choosing and switch to the working directory of the repo. Now checkout to the @code{bzz} branch, pull the latest version and build the binary:

@example
cd go-ethereum
git checkout bzz
git pull
godep go build -v ./cmd/geth
@end example

You can now run @command{./geth} to start your node. See @ref{Running a node} to learn how to operate a swarm node.

@quindex How do I install the swarm?
@cindex make, swarm installation
@cindex Makefile, swarm installation

@example
$ make && sudo make install
@end example

in the toplevel directory of the unpacked distribution.



@node Configuration options, , Installation, Running a Node
@section Configuration options

This section lists all the options you can set in the config file @file{<datadir>/bzz/<baseaccount>/config.json}. By default the swarm data directory is under the ethereum's data directory but different depending on the base address. This is important if you run multiple swarm nodes since storage, configuration, connected peers will all be distinct depending on the base address.

@menu
* Main parameters::
* Storage parameters::
* Chunker/bzzhash parameters::
* Hive/Kademlia parameters::
* SWAP parameters::
@end menu

@node Main parameters, Storage parameters, Configuration options, Configuration options
@subsection Main parameters

@deffn {} Path (@file{<datadir>/bzz/<baseaccount>})
@deffnx {} {}  swarm data directory
@end deffn

@deffn {} Port (8500)
@deffnx {} {}  port to run the http proxy server
@end deffn

@deffn {} PublicKey
@deffnx {} {}  Public key of your swarm base account
@end deffn

@deffn {} BzzKey
@deffnx {} {}  Swarm node base address (@math{hash(PublicKey)}). This is used to decide storage based on radius and routing by kademlia.
@end deffn


@node Storage parameters, Chunker/bzzhash parameters, Main parameters, Configuration options
@subsection Storage parameters

@deffn {} ChunkDbPath (@file{<datadir>/bzz/<baseaccount>/chunks})
@deffnx {} {}  leveldb directory for persistent storage of chunks
@end deffn

@deffn {} DbCapacity (5000000)
@deffnx {} {}  chunk storage capacity, number of chunks (5M is roughly 20-25GB)
@end deffn

@deffn {} CacheCapacity (5000)
@deffnx {} {}  Number of recent chunks cached in memory
@end deffn

@deffn {} Radius (0)
@deffnx {} {}  Storage Radius: minimum proximity order (number of identical prefix bits of address key) for chunks to warrant storage. Given a storage radius @math{r} and total number of chunks in the network @math{n}, the node stores @math{n*2^{-r}} chunks minimum. If you allow @math{b} bytes for guaranteed storage and the chunk storage size is @math{c}, your radius should be set to @math{int(log_2(nc/b))}
@end deffn

@node Chunker/bzzhash parameters, Hive/Kademlia parameters, Storage parameters, Configuration options
@subsection Chunker/bzzhash parameters
@cindex chunker
@cindex bzzhash

@deffn {} Branches (128)
@deffnx {} {}  Number of branches in bzzhash merkle tree. @math{Branches*ByteSize(Hash)} gives the datasize of chunks.
@end deffn

@deffn {} Hash (SHA256)
@deffnx {} {}  The hash function used by the chunker (base hash algo of bzzhash): SHA3 or SHA256
@end deffn

@deffn {} SplitTimeout (120s)
@deffnx {} {}  Maximum time before splitting a document times out
@end deffn

@deffn {} JoinTimeout (120s)
@deffnx {} {}  Maximum time before joining a document times out. Not used with Lazy Reader.
@end deffn

@node Hive/Kademlia parameters, SWAP parameters, Chunker/bzzhash parameters, Configuration options
@subsection Hive/Kademlia parameters
@cindex Kademlia

@deffn {} CallInterval (1s)
@deffnx {} {}  Time elapsed before attempting to connect to the most needed peer
@end deffn

@deffn {} BucketSize (3)
@deffnx {} {}  Maximum number of active peers in a kademlia proximity bin. If new peer is added, the worst peer in the bin is dropped.
@end deffn

@deffn {} MaxProx (10)
@deffnx {} {}  Highest Proximity order (i.e., Maximum number of identical prefix bits of address key) considered distinct. Given the total number of nodes in the network @math{N}, MaxProx should be larger than @math{log_2(N/ProxBinSize)}), safely @math{log_2(N)}.
@end deffn

@deffn {} ProxBinSize (8)
@deffnx {} {}  Number of most proximate nodes lumped together in the most proximate kademlia bin
@end deffn

@deffn {} KadDbPath (@file{<datadir>/bzz/<baseaccount>/bzz-peers.json})
@deffnx {} {}  json file path storing the known bzz peers used to bootstrap kademlia table.
@end deffn

@node SWAP parameters,  , Hive/Kademlia parameters, Configuration options
@subsection SWAP parameters
@cindex SWAP

@deffn {} BuyAt (@math{2*10^{10}} wei)
@deffnx {} {}  highest accepted price per chunk in wei
@end deffn

@deffn {} SellAt (@math{2*10^{10}} wei)
@deffnx {} {}  offered price per chunk in wei
@end deffn

@deffn {} PayAt (100 chunks)
@deffnx {} {}  Maximum number of chunks served without receiving a cheque. Debt tolerance.
@end deffn

@deffn {} DropAt ()
@deffnx {} {}  Maximum number of chunks served without receiving a cheque. Debt tolerance.
@end deffn


@deffn {} AutoCashInterval (@math{3*10^{11}}, 5 minutes)
@deffnx {} {}  Maximum Time before any outstanding cheques are cashed
@end deffn

@deffn {} AutoCashThreshold (@math{5*10^{13}})
@deffnx {} {}  Maximum total amount of uncashed cheques in Wei
@end deffn

@deffn {} AutoDepositInterval (@math{3*10^{11}}, 5 minutes)
@deffnx {} {}  Maximum time before cheque book is replenished if necessary by sending funds from the baseaccount
@end deffn

@deffn {} AutoDepositThreshold (@math{5*10^{13}})
@deffnx {} {}  Minimum balance in Wei required before replenishing the cheque book
@end deffn

@deffn {} AutoDepositBuffer (@math{10^{14}})
@deffnx {} {}  Maximum amount of Wei expected as a safety credit buffer on the cheque book
@end deffn

@deffn {} PublicKey (PublicKey(bzzaccount))
@deffnx {} {}  Public key of your swarm base account use
@end deffn

@deffn {} Contract ()
@deffnx {} {}  Address of the cheque book contract deployed on the Ethereum blockchain. If blank, a new chequebook contract will be deployed.
@end deffn

@deffn {} Beneficiary (Address(PublicKey))
@deffnx {} {}  Ethereum account address serving as beneficiary of incoming cheques
@end deffn

@node Getting started,  , Configuration options, Running a Node
@section Getting started

Use @command{geth} with the @code{--bzzaccount} parameter to start the client with Swarm enabled. If you want automatic deposits to your chequebook, then this account should be unlocked.

By default, the config file is sought under @file{<datadir>/bzz/<bzzaccount>/config.json}. If this file does not exist, the default config is written out which you can edit (the directories on the path will be created if necessary). In this case or if @code{config.Contract} is blank (zero address), a new chequebook contract is deployed. Until the contract is confirmed on the blockchain, no outgoing retrieve requests will be allowed.

@example
geth --bzzaccount 0 --unlock
@end example



